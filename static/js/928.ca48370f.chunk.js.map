{"version":3,"file":"static/js/928.ca48370f.chunk.js","mappings":"8SACAA,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAECC,EAAiB,mCAAG,WAAOC,GAAP,uFAERH,EAAAA,GAAAA,IAAA,qCAAwCC,GAAO,CACpEG,OAAQD,EAAWC,SAHU,cAEzBC,EAFyB,gBAMlBA,EAASC,KAAKC,QAAQC,KAAI,SAACC,GAAD,MAAY,CACjDC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MAFwB,IANR,mFAAH,sDAYjBC,EAAY,mCAAG,WAAOF,EAAIP,GAAX,uFACHH,EAAAA,GAAAA,IAAA,gBAAmBU,EAAnB,oBAAiCT,EAAjC,mBAAuD,CAC5EG,OAAQD,EAAWC,SAFK,cACpBC,EADoB,gBAKbA,EAASC,KALI,mFAAH,wDAQZO,EAAS,mCAAG,WAAOH,EAAIP,GAAX,uFACAH,EAAAA,GAAAA,IAAA,gBAAmBU,EAAnB,4BAAyCT,EAAzC,mBAA+D,CACpFG,OAAQD,EAAWC,SAFE,cACjBC,EADiB,gBAKVA,EAASC,KAAKQ,KAAKN,KAAI,SAACO,GAAD,MAAY,CAC9CL,GAAIK,EAAML,GACVM,KAAMD,EAAMC,KACZC,UAAWF,EAAME,UACjBC,aAAcH,EAAMG,aAJc,IALb,mFAAH,wDAaTC,EAAS,mCAAG,WAAOT,EAAIP,GAAX,uFACAH,EAAAA,GAAAA,IAAA,gBAAmBU,EAAnB,4BAAyCT,EAAzC,mBAA+D,CACpFG,OAAQD,EAAWC,SAFE,cACjBC,EADiB,gBAKVA,EAASC,KAAKC,QAAQC,KAAI,SAACY,GAAD,MAAa,CAClDV,GAAIU,EAAOV,GACXW,OAAQD,EAAOC,OACfC,QAASF,EAAOE,QAHqB,IALhB,mFAAH,wDAYTC,EAAc,mCAAG,WAAOC,EAAQrB,GAAf,uFACLH,EAAAA,GAAAA,IAAA,+BAAkCC,EAAlC,iCAA8DuB,GAAU,CAC7FpB,OAAQD,EAAWC,SAFO,cACtBC,EADsB,gBAKfA,EAASC,KAAKC,QAAQC,KAAI,SAACC,GAAD,MAAY,CACjDC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MAFwB,IALX,mFAAH,uD,iJC/Cdc,E,OAAOC,EAAAA,GAAH,qE,SCuCjB,EAnCoB,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAM7B,EAAa,IAAI8B,gBACjBC,EAAY,mCAAG,8GAEMf,EAAAA,EAAAA,IAAUQ,EAASxB,GAFzB,OAEXE,EAFW,OAGjB0B,EAAW1B,GAHM,gDAKjB8B,QAAQC,IAAR,MALiB,yDAAH,qDASlB,OADAF,IACO,WACL/B,EAAWkC,OACZ,CACF,GAAE,CAACV,KAEF,SAACF,EAAD,UACGK,EAAQQ,QACPR,EAAQtB,KAAI,SAAAY,GACV,OACE,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAOV,GAKnB,KAIR,C","sources":["Api/api.js","components/MovieReview/MovieReview.styled.jsx","components/MovieReview/MovieReview.jsx"],"sourcesContent":["import axios from \"axios\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\nconst KEY = '6d7719b287a3b4f9def878f317f76757';\n\nexport const getTrendingMovies = async (controller) => {\n  \n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`, {\n    signal: controller.signal,\n  });\n\n  return await response.data.results.map((movie) => ({\n    id: movie.id,\n    title: movie.title,\n  }));\n}\n\nexport const getMovieById = async (id, controller) => {\n  const response = await axios.get(`movie/${id}?api_key=${KEY}&language=en-US`, {\n    signal: controller.signal,\n  })\n\n  return await response.data;\n}\n\nexport const getActors = async (id, controller) => {\n  const response = await axios.get(`movie/${id}/credits?api_key=${KEY}&language=en-US`, {\n    signal: controller.signal,\n  });\n\n  return await response.data.cast.map((actor) => ({\n    id: actor.id,\n    name: actor.name,\n    character: actor.character,\n    profile_path: actor.profile_path,\n  }));\n}\n\nexport const getReview = async (id, controller) => {\n  const response = await axios.get(`movie/${id}/reviews?api_key=${KEY}&language=en-US`, {\n    signal: controller.signal,\n  });\n\n  return await response.data.results.map((review) => ({\n    id: review.id,\n    author: review.author,\n    content: review.content,\n  }));\n}\n\nexport const getMovieByName = async (search, controller) => {\n  const response = await axios.get(`search/movie?api_key=${KEY}&language=en-US&query=${search}`, {\n    signal: controller.signal,\n  });\n\n  return await response.data.results.map((movie) => ({\n    id: movie.id,\n    title: movie.title,\n  }));\n}","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  list-style: none;\n  padding-right: 20px;\n`;","import { getReview } from \"Api/api\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\"\nimport { List } from \"./MovieReview.styled\";\n\nconst MovieReview = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchReviews = async () => {\n      try {\n        const response = await getReview(movieId, controller);\n        setReviews(response)\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchReviews();\n    return () => {\n      controller.abort();\n    }\n  }, [movieId])\n  return (\n    <List>\n      {reviews.length &&\n        reviews.map(review => {\n          return (\n            <li key={review.id}>\n              <h3>{review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          )\n        })\n      }\n    </List>\n  )\n}\n\nexport default MovieReview;\n"],"names":["axios","KEY","getTrendingMovies","controller","signal","response","data","results","map","movie","id","title","getMovieById","getActors","cast","actor","name","character","profile_path","getReview","review","author","content","getMovieByName","search","List","styled","movieId","useParams","useState","reviews","setReviews","useEffect","AbortController","fetchReviews","console","log","abort","length"],"sourceRoot":""}